// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                      String                  @id @default(cuid())
  name                    String?
  username                String?                 @unique
  email                   String?                 @unique
  emailVerified           DateTime?
  image                   String?
  bio                     String?
  coverImage              String?
  website                 String?
  twitter                 String?
  linkedin                String?
  password                String?
  role                    Role                    @default(USER)
  status                  UserStatus              @default(ACTIVE)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  accounts                Account[]
  sessions                Session[]
  posts                   Post[]
  reviews                 Review[]
  favoritePosts           FavoritePost[]
  likedPosts              Post[]                  @relation("UserLikes")
  dislikedPosts           Post[]                  @relation("UserDislikes")
  createdSeries           Series[]
  groups                  GroupMember[]
  userNotifications       UserNotification[]
  createdNotifications    Notification[]          @relation("NotificationSender")
  createdGroups           Group[]                 @relation("GroupCreator")
  sentInvites             GroupInvite[]           @relation("GroupInviteSender")
  receivedInvites         GroupInvite[]           @relation("GroupInviteReceiver")
  suggestionsSent         GroupSuggestion[]       @relation("SuggestionSender")
  suggestionsReceived     GroupSuggestion[]       @relation("SuggestionReceiver")
  blockedUsers            User[]                  @relation("UserBlocks")
  blockedBy               User[]                  @relation("UserBlocks")
  permissionRequestStatus String?
  permissionRequestMessage String?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id                   Int            @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  status               String         @default("DRAFT")
  viewCount            Int            @default(0)
  authorId             String
  author               User           @relation(fields: [authorId], references: [id])
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  reviews              Review[]
  favoritePosts        FavoritePost[]
  likedBy              User[]         @relation("UserLikes")
  dislikedBy           User[]         @relation("UserDislikes")
  subtitles            Subtitle[]
  mediaLinks           MediaLink[]
  type                 PostType       @default(MOVIE)
  year                 Int?
  duration             String?
  genres               String?
  directors            String?
  mainCast             String?
  imdbRating           Float?
  rottenTomatoesRating Int?
  googleRating         Int?
  seriesId             Int?
  series               Series?        @relation(fields: [seriesId], references: [id])
  orderInSeries        Int?
  visibility           Visibility     @default(PUBLIC)
  groupId              Int?
  group                Group?         @relation(fields: [groupId], references: [id])

  @@index([authorId])
  @@index([seriesId])
  @@index([groupId])
}

model Series {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([authorId])
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId  Int?
  parent    Review?  @relation("ReviewReplies", fields: [parentId], references: [id])
  replies   Review[] @relation("ReviewReplies")

  @@index([postId])
  @@index([userId])
  @@index([parentId])
}

model FavoritePost {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  url          String
  uploaderName String
  postId       Int
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@index([postId])
}

model MediaLink {
  id     Int    @id @default(autoincrement())
  type   String // 'trailer' or 'image'
  url    String
  postId Int
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Group {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String?
  profilePhoto    String?
  coverPhoto      String?
  status          GroupStatus       @default(ACTIVE)
  visibility      GroupVisibility   @default(PUBLIC)
  createdById     String
  createdBy       User              @relation("GroupCreator", fields: [createdById], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  members         GroupMember[]
  invites         GroupInvite[]
  suggestions     GroupSuggestion[]
  permissions     GroupPermission[]
  notifications   Notification[]
  posts           Post[]

  @@index([createdById])
}

model GroupMember {
  id        Int          @id @default(autoincrement())
  userId    String
  groupId   Int
  role      GroupRole    @default(MEMBER)
  status    MemberStatus @default(ACTIVE)
  joinedAt  DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([groupId])
}

model GroupInvite {
  id         Int          @id @default(autoincrement())
  groupId    Int
  senderId   String
  receiverId String
  status     InviteStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  group      Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  sender     User         @relation("GroupInviteSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User         @relation("GroupInviteReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([groupId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

model GroupSuggestion {
  id              Int               @id @default(autoincrement())
  groupId         Int
  suggestedById   String
  suggestedUserId String
  status          SuggestionStatus  @default(PENDING)
  createdAt       DateTime          @default(now())
  group           Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  suggestedBy     User              @relation("SuggestionSender", fields: [suggestedById], references: [id], onDelete: Cascade)
  suggestedUser   User              @relation("SuggestionReceiver", fields: [suggestedUserId], references: [id], onDelete: Cascade)

  @@unique([groupId, suggestedUserId])
  @@index([suggestedById])
  @@index([suggestedUserId])
}

model Notification {
  id           Int                @id @default(autoincrement())
  title        String
  message      String
  type         NotificationType
  isPublic     Boolean            @default(false)
  isSent       Boolean            @default(false)
  senderId     String?
  sender       User?              @relation("NotificationSender", fields: [senderId], references: [id])
  groupId      Int?
  group        Group?             @relation(fields: [groupId], references: [id])
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  recipients   UserNotification[]
  scheduledFor DateTime?

  @@index([senderId])
  @@index([groupId])
}

model UserNotification {
  id             Int          @id @default(autoincrement())
  userId         String
  notificationId Int
  status         ReadStatus   @default(UNREAD)
  isUndone       Boolean      @default(false)
  isHidden       Boolean      @default(false)
  isDisabled     Boolean      @default(false)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
  @@index([notificationId])
}

model GroupPermission {
  id          Int       @id @default(autoincrement())
  groupId     Int
  role        GroupRole
  permissions Json
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, role])
}

enum Role {
  USER
  USER_ADMIN
  SUPER_ADMIN
}

enum PostType {
  MOVIE
  TV_SERIES
  OTHER
}

enum Visibility {
  PUBLIC
  GROUP_ONLY
}

enum UserStatus {
  ACTIVE
  DISABLED
  PENDING
  DELETED
}

enum GroupStatus {
  ACTIVE
  DISABLED
  PENDING
  DELETED
}

enum GroupVisibility {
  PUBLIC
  PRIVATE
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum MemberStatus {
  ACTIVE
  DISABLED
  PENDING
  LEFT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum SuggestionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  SYSTEM
  ALERT
  INVITE
  SUGGESTION
  CUSTOM
}

enum ReadStatus {
  UNREAD
  READ
  DELETED
}

    