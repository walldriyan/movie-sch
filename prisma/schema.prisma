// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Movie {
  id                    Int      @id @default(autoincrement())
  title                 String
  description           String
  posterUrl             String?
  year                  Int
  duration              String
  genres                String
  imdbRating            Float
  rottenTomatoesRating  Int?
  googleRating          Int?
  directors             String?
  mainCast              String?
  status                String?  @default("DRAFT")
  viewCount             Int      @default(0)
  author                User     @relation(fields: [authorId], references: [id])
  authorId              String
  reviews               Review[]
  subtitles             Subtitle[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  likedBy               User[]   @relation("UserLikes")
  dislikedBy            User[]   @relation("UserDislikes")
}

model Subtitle {
  id           Int    @id @default(autoincrement())
  language     String
  uploaderName String
  downloadUrl  String
  movie        Movie  @relation(fields: [movieId], references: [id])
  movieId      Int
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

// NextAuth models
model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  password                String?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  role                    String    @default("USER")
  permissions             String? // This could be a JSON string of permissions
  bio                     String?
  website                 String?
  twitter                 String?
  linkedin                String?
  permissionRequestStatus String?   @default("NONE") // PENDING, APPROVED, REJECTED
  permissionRequestMessage String?

  // App-specific relations
  movies                  Movie[]
  reviews                 Review[]
  likedMovies             Movie[]   @relation("UserLikes")
  dislikedMovies          Movie[]   @relation("UserDislikes")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
