// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  bio           String?
  website       String?
  twitter       String?
  linkedin      String?

  permissionRequestStatus  String?
  permissionRequestMessage String?

  accounts Account[]
  sessions Session[]
  movies   Movie[]

  likedMovies    Movie[] @relation("UserLikedMovies")
  dislikedMovies Movie[] @relation("UserDislikedMovies")

  reviews  Review[]
  subtitles Subtitle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Movie {
  id                   Int      @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  year                 Int
  duration             String
  genres               String?
  imdbRating           Float
  rottenTomatoesRating Int?
  googleRating         Int?
  status               String   @default("DRAFT")
  viewCount            Int      @default(0)
  directors            String?
  mainCast             String?
  mediaLinks           String?
  
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  likedBy    User[] @relation("UserLikedMovies")
  dislikedBy User[] @relation("UserDislikedMovies")

  reviews   Review[]
  subtitles Subtitle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id      Int    @id @default(autoincrement())
  comment String
  rating  Int

  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subtitle {
  id           Int    @id @default(autoincrement())
  language     String
  filePath     String
  uploaderName String

  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id])

  uploaderId String
  uploader   User   @relation(fields: [uploaderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
