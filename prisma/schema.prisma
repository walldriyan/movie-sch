// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Post {
  id                    Int            @id @default(autoincrement())
  title                 String
  description           String
  posterUrl             String?
  year                  Int?
  duration              String?
  genres                String?
  directors             String?
  mainCast              String?
  imdbRating            Float?
  rottenTomatoesRating  Int?
  googleRating          Int?
  status                String         @default("DRAFT")
  viewCount             Int            @default(0)
  author                User           @relation(fields: [authorId], references: [id])
  authorId              String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  reviews               Review[]
  subtitles             Subtitle[]
  mediaLinks            MediaLink[]
  favoritePosts         FavoritePost[]
  likedBy               User[]         @relation("LikedBy")
  dislikedBy            User[]         @relation("DislikedBy")
  type                  PostType       @default(MOVIE)
  seriesId              Int?
  series                Series?        @relation(fields: [seriesId], references: [id])
  orderInSeries         Int?
  Episode               Episode[]
  MetaData              MetaData[]
}

model Episode {
  id          Int      @id @default(autoinautoincrement())
  title       String
  description String?
  episode     Int
  season      Int
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MetaData {
  id        Int      @id @default(autoincrement())
  type      String
  value     String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String         @id @default(cuid())
  name                      String?
  email                     String?        @unique
  emailVerified             DateTime?
  image                     String?
  password                  String?
  accounts                  Account[]
  sessions                  Session[]
  posts                     Post[]
  reviews                   Review[]
  favoritePosts             FavoritePost[]
  permissionRequestStatus   String?        @default("NONE")
  permissionRequestMessage  String?
  role                      String         @default("USER")
  likedPosts                Post[]         @relation("LikedBy")
  dislikedPosts             Post[]         @relation("DislikedBy")
  updatedAt                 DateTime       @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  parentId  Int?
  parent    Review?  @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Review[] @relation("Replies")
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  url          String
  uploaderName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       Int
}

model MediaLink {
  id     Int    @id @default(autoincrement())
  type   String // "trailer" or "image"
  url    String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model FavoritePost {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Series {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum PostType {
  MOVIE
  TV_SERIES
  OTHER
}
