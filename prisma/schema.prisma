// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Post {
  id                    Int              @id @default(autoincrement())
  title                 String
  description           String
  posterUrl             String?
  year                  Int?
  duration              String?
  genres                String?
  directors             String?
  mainCast              String?
  imdbRating            Float?
  rottenTomatoesRating  Int?
  googleRating          Int?
  viewCount             Int              @default(0)
  status                String           @default("DRAFT")
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  author                User             @relation(fields: [authorId], references: [id])
  authorId              String
  reviews               Review[]
  subtitles             Subtitle[]
  favoritePosts         FavoritePost[]
  likedBy               User[]           @relation("UserLikes")
  dislikedBy            User[]           @relation("UserDislikes")
  episodes              Episode[]
  metaData              MetaData[]
  mediaLinks            MediaLink[]
  type                  PostType         @default(MOVIE)
  series                Series?          @relation(fields: [seriesId], references: [id])
  seriesId              Int?
  orderInSeries         Int?

  @@index([authorId])
  @@index([seriesId])
}

model Series {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  posts       Post[]

  @@index([authorId])
}

enum PostType {
  MOVIE
  TV_SERIES
  OTHER
}

model Episode {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  episodeNum  Int
  seasonNum   Int
  post        Post     @relation(fields: [postId], references: [id])
  postId      Int

  @@index([postId])
}

model MetaData {
  id     Int    @id @default(autoincrement())
  key    String
  value  String
  post   Post   @relation(fields: [postId], references: [id])
  postId Int

  @@index([postId])
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  parent    Review?  @relation("ReviewReplies", fields: [parentId], references: [id])
  parentId  Int?
  replies   Review[] @relation("ReviewReplies")

  @@index([userId])
  @@index([postId])
  @@index([parentId])
}

model Subtitle {
  id              Int                   @id @default(autoincrement())
  language        String
  uploaderName    String
  url             String
  createdAt       DateTime              @default(now())
  post            Post                  @relation(fields: [postId], references: [id])
  postId          Int
  accessLevel     SubtitleAccessLevel   @default(PUBLIC)
  authorizedUsers User[]

  @@index([postId])
}

model MediaLink {
  id     Int    @id @default(autoincrement())
  type   String // e.g., 'trailer', 'image'
  url    String
  post   Post   @relation(fields: [postId], references: [id])
  postId Int

  @@index([postId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                       String          @id @default(cuid())
  name                     String?
  email                    String?         @unique
  emailVerified            DateTime?
  image                    String?
  coverImage               String?
  password                 String?
  bio                      String?
  website                  String?
  twitter                  String?
  linkedin                 String?
  role                     String          @default("USER")
  isSubscriber             Boolean         @default(false)
  permissionRequestStatus  String?
  permissionRequestMessage String?
  accounts                 Account[]
  sessions                 Session[]
  posts                    Post[]
  reviews                  Review[]
  favoritePosts            FavoritePost[]
  likedPosts               Post[]          @relation("UserLikes")
  dislikedPosts            Post[]          @relation("UserDislikes")
  createdSeries            Series[]
  authorizedSubtitles      Subtitle[]
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
}

model FavoritePost {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SubtitleAccessLevel {
  PUBLIC
  SUBSCRIBER_ONLY
  AUTHORIZED_ONLY
}
