// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Movie {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  posterUrl   String?
  year        Int
  duration    String
  genres      String
  imdbRating  Float
  viewCount   Int       @default(0)
  likes       Int       @default(0)
  status      String    @default("PUBLISHED") // e.g., PUBLISHED, DRAFT, PENDING_DELETION
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  reviews     Review[]
  subtitles   Subtitle[]
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Subtitle {
  id          Int      @id @default(autoincrement())
  language    String
  url         String
  uploaderName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  movie       Movie    @relation(fields: [movieId], references: [id])
  movieId     Int
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER") // e.g., USER, USER_ADMIN, SUPER_ADMIN
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  permissionRequestStatus  String?   @default("NONE") // e.g., NONE, PENDING, APPROVED, REJECTED
  permissionRequestMessage String?

  bio           String?
  website       String?
  twitter       String?
  linkedin      String?
  
  accounts      Account[]
  sessions      Session[]
  movies        Movie[]
  reviews       Review[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
