// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  bio                     String?
  coverImage              String?
  website                 String?
  twitter                 String?
  linkedin                String?
  password                String?
  role                    String    @default("USER")
  permissionRequestStatus String?
  permissionRequestMessage String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  reviews           Review[]
  favoritePosts     FavoritePost[]
  likedPosts        Post[]           @relation("UserLikes")
  dislikedPosts     Post[]           @relation("UserDislikes")
  createdSeries     Series[]
  groups            GroupMember[]
  userNotifications UserNotification[]
  createdNotifications Notification[]
  createdGroups     Group[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id                   Int      @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  year                 Int?
  duration             String?
  genres               String?
  directors            String?
  mainCast             String?
  imdbRating           Float?
  rottenTomatoesRating Int?
  googleRating         Int?
  status               String   @default("DRAFT")
  viewCount            Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  type                 PostType @default(MOVIE)
  visibility           String   @default("PUBLIC")
  orderInSeries        Int?

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  seriesId Int?
  series   Series? @relation(fields: [seriesId], references: [id])

  reviews       Review[]
  subtitles     Subtitle[]
  likedBy       User[]         @relation("UserLikes")
  dislikedBy    User[]         @relation("UserDislikes")
  favoritePosts FavoritePost[]
  mediaLinks    MediaLink[]
  metaData      MetaData[]
  
  groupId Int?
  group   Group? @relation(fields: [groupId], references: [id])
}

enum PostType {
  MOVIE
  TV_SERIES
  OTHER
}

model Series {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  episodes    Episode[]
}

model Episode {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  episodeNumber Int
  seasonNumber  Int
  releaseDate DateTime?
  seriesId    Int
  series      Series  @relation(fields: [seriesId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Self-relation for replies
  parentId  Int?
  parent    Review?  @relation("ReviewReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Review[] @relation("ReviewReplies")
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  url          String
  uploaderName String
  createdAt    DateTime @default(now())
  postId       Int
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model FavoritePost {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model MetaData {
  id     Int    @id @default(autoincrement())
  key    String
  value  String
  postId Int
  post   Post   @relation(fields: [postId], references: [id])
}

model Notification {
  id               Int                @id @default(autoincrement())
  type             String
  message          String
  isRead           Boolean            @default(false)
  createdAt        DateTime           @default(now())
  authorId         String
  author           User               @relation("createdNotifications", fields: [authorId], references: [id])
  users            UserNotification[]
}

model UserNotification {
  id             Int          @id @default(autoincrement())
  userId         String
  notificationId Int
  isRead         Boolean      @default(false)
  user           User         @relation(fields: [userId], references: [id])
  notification   Notification @relation(fields: [notificationId], references: [id])

  @@unique([userId, notificationId])
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation("createdGroups", fields: [authorId], references: [id])
  members     GroupMember[]
  posts       Post[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  role      String   @default("MEMBER") // e.g., "ADMIN", "MEMBER"
  createdAt DateTime @default(now())
  groupId   Int
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
}

model MediaLink {
  id     Int    @id @default(autoincrement())
  type   String // "trailer" or "image"
  url    String
  postId Int
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}
