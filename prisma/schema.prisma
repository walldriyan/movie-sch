// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Post {
  id                   Int            @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  year                 Int?
  duration             String?
  genres               String?
  imdbRating           Float?
  rottenTomatoesRating Int?
  googleRating         Int?
  status               String?        @default("DRAFT")
  viewCount            Int            @default(0)
  type                 PostType       @default(MOVIE)
  authorId             String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  author               User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reviews              Review[]
  subtitles            Subtitle[]
  favoritedBy          FavoritePost[]
  episodes             Episode[]
  metaData             MetaData[]
  mediaLinks           String?

  @@index([authorId])
}

model Episode {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  episodeNumber Int
  seasonNumber  Int
  releaseDate DateTime?
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int

  @@index([postId])
}

model MetaData {
  id       Int     @id @default(autoincrement())
  key      String
  value    String
  post     Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int

  @@index([postId])
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  userId    String
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  uploaderName String
  downloadUrl  String
  filePath     String?
  createdAt    DateTime @default(now())
  postId       Int
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model FavoritePost {
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  bio           String?
  website       String?
  twitter       String?
  linkedin      String?
  permissionRequestStatus String?
  permissionRequestMessage String?
  
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  reviews       Review[]
  favoritePosts FavoritePost[]
  likedPosts    Post[]    @relation("LikedPosts")
  dislikedPosts Post[]    @relation("DislikedPosts")

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PostType {
  MOVIE
  TV_SERIES
  SONG
  NOVEL
  POEM
  ARTICLE
}
