// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String?   @default("USER")
  status        String?   @default("ACTIVE")
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  posterUrl       String?
  galleryImageIds String?
  year            Int
  duration        String
  genres          String
  imdbRating      Float
  status          String   @default("PUBLISHED")
  viewCount       Int      @default(0)
  likes           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  reviews         Review[]
  subtitles       Subtitle[]
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  movieId   Int
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  url          String
  uploaderName String
  movieId      Int
  movie        Movie    @relation(fields: [movieId], references: [id])
  createdAt    DateTime @default(now())
}
