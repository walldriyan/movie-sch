// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  permissionsRequestStatus String?
  permissionRequestMessage String?

  bio           String?
  website       String?
  twitter       String?
  linkedin      String?

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  reviews       Review[]
  favoritePosts FavoritePost[]
  likedPosts    Post[]      @relation("UserLikes")
  dislikedPosts Post[]      @relation("UserDislikes")

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PostType {
  MOVIE
  TV_SERIES
  OTHER
}

model Post {
  id                   Int            @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  year                 Int?
  duration             String?
  genres               String?
  directors            String?
  mainCast             String?
  imdbRating           Float?
  rottenTomatoesRating Int?
  googleRating         Int?
  authorId             String
  author               User           @relation(fields: [authorId], references: [id])
  status               String         @default("DRAFT")
  viewCount            Int            @default(0)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  reviews              Review[]
  subtitles            Subtitle[]
  favoritePosts        FavoritePost[]
  likedBy              User[]         @relation("UserLikes")
  dislikedBy           User[]         @relation("UserDislikes")
  mediaLinks           MediaLink[]
  type                 PostType       @default(MOVIE)
  seriesId             Int?
  series               Series?        @relation(fields: [seriesId], references: [id])
  orderInSeries        Int?
}

model Series {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  authorId    String
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  parentId  Int?
  parent    Review?  @relation("ReviewReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Review[] @relation("ReviewReplies")
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  url          String
  uploaderName String
  createdAt    DateTime @default(now())
  postId       Int
  post         Post     @relation(fields: [postId], references: [id])
}

model FavoritePost {
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Episode {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  episodeNumber Int
  seasonNumber  Int
  releaseDate   DateTime?
  duration      Int?
  posterUrl     String?
  postId        Int
  post          Post     @relation(fields: [postId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model MediaLink {
  id      Int    @id @default(autoincrement())
  type    String // e.g., 'trailer', 'image'
  url     String
  postId  Int
  post    Post   @relation(fields: [postId], references: [id])
}

model MetaData {
  id      Int     @id @default(autoincrement())
  key     String
  value   String
  postId  Int
  post    Post    @relation(fields: [postId], references: [id])

  @@unique([postId, key])
}