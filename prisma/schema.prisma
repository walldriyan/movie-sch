// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Post {
  id                    Int      @id @default(autoincrement())
  title                 String
  description           String   @db.Text
  posterUrl             String?
  year                  Int?
  duration              String?
  genres                String?
  directors             String?
  mainCast              String?
  imdbRating            Float?
  rottenTomatoesRating  Int?
  googleRating          Int?
  status                String   @default("DRAFT")
  viewCount             Int      @default(0)
  authorId              String
  author                User     @relation("UserPosts", fields: [authorId], references: [id])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  reviews               Review[]
  subtitles             Subtitle[]
  favoritePosts         FavoritePost[]
  mediaLinks            MediaLink[]
  seriesId              Int?
  series                Series?  @relation(fields: [seriesId], references: [id])
  orderInSeries         Int?

  @@index([authorId])
  @@index([seriesId])
}

model Series {
  id            Int     @id @default(autoincrement())
  title         String
  description   String?
  posts         Post[]
}

model Episode {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  episodeNumber Int
  seasonNumber  Int
  releaseDate DateTime?
  duration    String?
  postId      Int
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@index([postId])
}


model MetaData {
  id        Int      @id @default(autoincrement())
  key       String
  value     String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model MediaLink {
  id      Int    @id @default(autoincrement())
  type    String // e.g., 'trailer', 'image', 'download'
  url     String
  postId  Int
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  permissionRequestStatus String? @default("NONE") // NONE, PENDING, APPROVED, REJECTED
  permissionRequestMessage String?
  bio           String?
  website       String?
  twitter       String?
  linkedin      String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]    @relation("UserPosts")
  reviews       Review[]
  favoritePosts FavoritePost[]
  likedPosts    Post[]    @relation("LikedBy")
  dislikedPosts Post[]    @relation("DislikedBy")
  updatedAt     DateTime  @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([postId])
  @@index([userId])
}

model Subtitle {
  id          Int      @id @default(autoincrement())
  language    String
  url         String
  uploaderName String
  createdAt   DateTime @default(now())
  postId      Int
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model FavoritePost {
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
