// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Movie {
  id                   Int       @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  year                 Int
  duration             String
  genres               String
  directors            String?
  mainCast             String?
  imdbRating           Float
  rottenTomatoesRating Int?
  googleRating         Int?
  viewCount            Int       @default(0)
  status               String?   @default("DRAFT")
  authorId             String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  author               User      @relation(fields: [authorId], references: [id])
  reviews              Review[]
  subtitles            Subtitle[]
  likedBy              User[]    @relation("MovieLikes")
  dislikedBy           User[]    @relation("MovieDislikes")
  mediaLinks           String?   @default("[]")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  movieId   Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movie     Movie    @relation(fields: [movieId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Subtitle {
  id            Int      @id @default(autoincrement())
  language      String
  url           String
  uploaderName  String
  movieId       Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  movie         Movie    @relation(fields: [movieId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  accounts                Account[]
  sessions                Session[]
  movies                  Movie[]
  reviews                 Review[]
  role                    String    @default("USER")
  likedMovies             Movie[]   @relation("MovieLikes")
  dislikedMovies          Movie[]   @relation("MovieDislikes")
  bio                     String?
  website                 String?
  twitter                 String?
  linkedin                String?
  permissionRequestStatus String?   @default("NONE") // NONE, PENDING, APPROVED, REJECTED
  permissionRequestMessage String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
