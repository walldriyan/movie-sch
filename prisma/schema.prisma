
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id                    Int            @id @default(autoincrement())
  title                 String
  description           String
  posterUrl             String?
  year                  Int?
  duration              String?
  genres                String?
  directors             String?
  mainCast              String?
  imdbRating            Float?
  rottenTomatoesRating  Int?
  googleRating          Int?
  status                String         @default("DRAFT")
  viewCount             Int            @default(0)
  author                User           @relation(fields: [authorId], references: [id])
  authorId              String
  reviews               Review[]
  subtitles             Subtitle[]
  favoritePosts         FavoritePost[]
  likedBy               User[]         @relation("LikedPosts")
  dislikedBy            User[]         @relation("DislikedPosts")
  createdAt             DateTime       @default(now())
  episodes              Episode[]
  metaData              MetaData[]
  type                  PostType       @default(MOVIE)
  mediaLinks            MediaLink[]
}

enum PostType {
  MOVIE
  TV_SERIES
  SUBTITLE
  REVIEW
}

model Review {
  id      Int    @id @default(autoincrement())
  post    Post   @relation(fields: [postId], references: [id])
  postId  Int
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  rating  Int
  comment String
}

model Subtitle {
  id            Int    @id @default(autoincrement())
  post          Post   @relation(fields: [postId], references: [id])
  postId        Int
  language      String
  url           String
  uploaderName  String
}

model MediaLink {
  id      Int    @id @default(autoincrement())
  postId  Int
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  type    String // 'trailer' or 'image'
  url     String
}

model Episode {
  id          Int      @id @default(autoincrement())
  postId      Int
  post        Post     @relation(fields: [postId], references: [id])
  season      Int
  episode     Int
  title       String
  description String?
  airDate     DateTime?
}

model MetaData {
  id          Int     @id @default(autoincrement())
  postId      Int
  post        Post    @relation(fields: [postId], references: [id])
  metaKey     String
  metaValue   String
}

model FavoritePost {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@id([userId, postId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  reviews       Review[]
  favoritePosts FavoritePost[]
  likedPosts    Post[]    @relation("LikedPosts")
  dislikedPosts Post[]    @relation("DislikedPosts")

  role                     String  @default("USER") // USER, USER_ADMIN, SUPER_ADMIN
  permissionRequestStatus  String? // PENDING, APPROVED, REJECTED
  permissionRequestMessage String?
  bio                      String?
  website                  String?
  twitter                  String?
  linkedin                 String?
  updatedAt                DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
