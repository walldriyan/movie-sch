// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String          @id @default(cuid())
  name                     String?
  email                    String?         @unique
  emailVerified            DateTime?
  image                    String?
  password                 String?
  bio                      String?
  website                  String?
  twitter                  String?
  linkedin                 String?
  coverImage               String?
  role                     String          @default("USER")
  permissionsRequestStatus String?
  permissionRequestMessage String?
  accounts                 Account[]
  sessions                 Session[]
  posts                    Post[]
  reviews                  Review[]
  favoritePosts            FavoritePost[]
  likedPosts               Post[]          @relation("LikedPosts")
  dislikedPosts            Post[]          @relation("DislikedPosts")
  createdSeries            Series[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id                   Int            @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  year                 Int?
  duration             String?
  genres               String?
  directors            String?
  mainCast             String?
  imdbRating           Float?
  rottenTomatoesRating Int?
  googleRating         Int?
  status               String         @default("DRAFT")
  viewCount            Int            @default(0)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  authorId             String
  author               User           @relation(fields: [authorId], references: [id])
  reviews              Review[]
  subtitles            Subtitle[]
  favoritePosts        FavoritePost[]
  likedBy              User[]         @relation("LikedPosts")
  dislikedBy           User[]         @relation("DislikedPosts")
  mediaLinks           MediaLink[]
  episodes             Episode[]
  metaData             MetaData[]
  seriesId             Int?
  series               Series?        @relation(fields: [seriesId], references: [id])
  orderInSeries        Int?
  type                 String         @default("OTHER")

  @@index([authorId])
  @@index([seriesId])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  parentId  Int?
  parent    Review?  @relation("ReviewReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Review[] @relation("ReviewReplies")

  @@index([postId])
  @@index([userId])
  @@index([parentId])
}

model Subtitle {
  id            Int      @id @default(autoincrement())
  language      String
  url           String
  uploaderName  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  postId        Int
  post          Post     @relation(fields: [postId], references: [id])

  @@index([postId])
}

model FavoritePost {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model MediaLink {
  id     Int    @id @default(autoincrement())
  type   String // e.g., 'trailer', 'image'
  url    String
  postId Int
  post   Post   @relation(fields: [postId], references: [id])

  @@index([postId])
}

model Episode {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  episodeNumber Int
  seasonNumber  Int
  releaseDate   DateTime?
  posterUrl     String?
  postId        Int
  post          Post     @relation(fields: [postId], references: [id])

  @@index([postId])
}

model MetaData {
  id     Int    @id @default(autoincrement())
  key    String
  value  String
  postId Int
  post   Post   @relation(fields: [postId], references: [id])

  @@index([postId])
}

model Series {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  posts       Post[]

  @@index([authorId])
}
