// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                        String    @id @default(cuid())
  name                      String?
  email                     String?   @unique
  emailVerified             DateTime?
  image                     String?
  password                  String?
  role                      String    @default("USER")
  permissionRequestStatus   String?   @default("NONE")
  permissionRequestMessage  String?
  bio                       String?
  website                   String?
  twitter                   String?
  linkedin                  String?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  accounts                  Account[]
  sessions                  Session[]
  movies                    Movie[]
  reviews                   Review[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id                   Int       @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  year                 Int
  duration             String
  genres               String? // Stored as a JSON string
  directors            String?
  mainCast             String?
  imdbRating           Float
  rottenTomatoesRating Int?
  googleRating         Int?
  status               String?
  viewCount            Int       @default(0)
  likes                Int       @default(0)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  authorId             String
  author               User      @relation(fields: [authorId], references: [id])
  reviews              Review[]
  subtitles            Subtitle[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  movieId   Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  uploaderName String
  downloadUrl  String
  createdAt    DateTime @default(now())
  movieId      Int
  movie        Movie    @relation(fields: [movieId], references: [id])
}