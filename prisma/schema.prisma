// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Full-stack auth with NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  coverImage              String?
  bio                     String?
  website                 String?
  twitter                 String?
  linkedin                String?
  password                String?
  role                    String    @default("USER")
  permissionRequestStatus String?   @default("NONE")
  permissionRequestMessage String?

  accounts          Account[]
  sessions          Session[]
  posts             Post[]      @relation("PostAuthor")
  createdGroups     Group[]     @relation("GroupAuthor")
  groupMemberships  GroupMember[]

  favoritePosts     FavoritePost[]
  reviews           Review[]
  likedPosts        Post[] @relation("LikedPosts")
  dislikedPosts     Post[] @relation("DislikedPosts")

  createdSeries       Series[]
  
  notificationsSent       Notification[]
  userNotifications       UserNotification[]
}

enum PostType {
  MOVIE
  TV_SERIES
  OTHER
}

model Post {
  id                   Int      @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  year                 Int?
  duration             String?
  genres               String? // Comma-separated
  directors            String?
  mainCast             String?
  imdbRating           Float?
  rottenTomatoesRating Int?
  googleRating         Int?
  status               String   @default("DRAFT")
  viewCount            Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  type                 PostType @default(MOVIE)
  
  seriesId             Int?
  series               Series?  @relation(fields: [seriesId], references: [id])
  orderInSeries        Int?

  visibility           String   @default("PUBLIC") // PUBLIC, GROUP_ONLY
  groupId              Int?
  group                Group?   @relation(fields: [groupId], references: [id], onDelete: SetNull)

  authorId    String
  author      User     @relation("PostAuthor", fields: [authorId], references: [id])
  
  mediaLinks    MediaLink[]
  reviews       Review[]
  subtitles     Subtitle[]
  favoritePosts FavoritePost[]
  
  likedBy       User[] @relation("LikedPosts")
  dislikedBy    User[] @relation("DislikedPosts")

  @@index([authorId])
  @@index([seriesId])
}

model Series {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  posts       Post[]
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MediaLink {
  id      Int    @id @default(autoincrement())
  type    String // 'trailer' or 'image'
  url     String
  postId  Int
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Subtitle {
  id            Int      @id @default(autoincrement())
  language      String
  url           String
  uploaderName  String
  createdAt     DateTime @default(now())
  postId        Int
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId  Int?
  parent    Review?  @relation("ReviewReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Review[] @relation("ReviewReplies")
}

model FavoritePost {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

// Models for User Groups
model Group {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  members     GroupMember[]
  posts       Post[]
  authorId    String
  author      User     @relation("GroupAuthor", fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  groupId   Int
  userId    String
  role      String   @default("MEMBER") // e.g., MEMBER, ADMIN
  createdAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
}


model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  createdAt DateTime @default(now())
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  
  groupId   Int? // Optional: for group-specific notifications

  userNotifications UserNotification[]
}

model UserNotification {
  id             Int      @id @default(autoincrement())
  isRead         Boolean  @default(false)
  
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  
  notificationId Int
  notification   Notification @relation(fields: [notificationId], references: [id])

  @@unique([userId, notificationId])
}