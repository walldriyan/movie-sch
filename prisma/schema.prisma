// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Post {
  id                   Int            @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  status               String         @default("DRAFT")
  viewCount            Int            @default(0)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  author               User           @relation(fields: [authorId], references: [id])
  authorId             String
  reviews              Review[]
  favoritePosts        FavoritePost[]
  likedBy              User[]         @relation("PostLikes")
  dislikedBy           User[]         @relation("PostDislikes")
  subtitles            Subtitle[]
  mediaLinks           MediaLink[]
  // Movie specific fields
  year                 Int?
  duration             String?
  genres               String?
  directors            String?
  mainCast             String?
  imdbRating           Float?
  rottenTomatoesRating Int?
  googleRating         Int?
  // Series specific fields
  seriesId             Int?
  series               Series?        @relation(fields: [seriesId], references: [id])
  orderInSeries        Int?
  episodes             Episode[]
  type                 String         @default("MOVIE") // MOVIE, TV_SERIES, OTHER
  // Access control
  visibility           String         @default("PUBLIC") // PUBLIC, GROUP_ONLY
  groupId              Int?
  group                Group?         @relation(fields: [groupId], references: [id])
  metaData             MetaData[]
}

model Subtitle {
  id           Int    @id @default(autoincrement())
  language     String
  url          String
  uploaderName String
  postId       Int
  post         Post   @relation(fields: [postId], references: [id])
}

model MediaLink {
  id     Int    @id @default(autoincrement())
  type   String // "trailer" or "image"
  url    String
  postId Int
  post   Post   @relation(fields: [postId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  parentId  Int?
  parent    Review?  @relation("ReviewReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Review[] @relation("ReviewReplies")
}

model Series {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Episode {
  id            Int     @id @default(autoincrement())
  title         String
  description   String?
  episodeNumber Int
  seasonNumber  Int
  postId        Int
  post          Post    @relation(fields: [postId], references: [id])
}

model MetaData {
  id     Int    @id @default(autoincrement())
  key    String
  value  String
  postId Int
  post   Post   @relation(fields: [postId], references: [id])
}

// User Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  reviews       Review[]
  role          String    @default("USER") // USER, USER_ADMIN, SUPER_ADMIN
  series        Series[]

  // For permission requests
  permissionRequestStatus  String? // PENDING, APPROVED, REJECTED, NONE
  permissionRequestMessage String?

  favoritePosts            FavoritePost[]
  likedPosts               Post[]         @relation("PostLikes")
  dislikedPosts            Post[]         @relation("PostDislikes")
  groups                   GroupMember[]
  // Social links
  bio                      String?
  website                  String?
  twitter                  String?
  linkedin                 String?
  coverImage               String?
}

model FavoritePost {
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@id([userId, postId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  members     GroupMember[]
  posts       Post[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  role      String // e.g., ADMIN, MEMBER
  createdAt DateTime @default(now())

  @@unique([groupId, userId])
}

// Independent Notification Models (No @relation)
model Notification {
  id         Int      @id @default(autoincrement())
  title      String
  message    String
  authorId   String   // The ID of the user who sent the notification
  groupId    Int?     // Optional: The ID of the group it was sent to
  createdAt  DateTime @default(now())
}

model UserNotification {
  id             Int      @id @default(autoincrement())
  userId         String   // The ID of the user who receives the notification
  notificationId Int      // The ID of the notification
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
}
