// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                        String    @id @default(cuid())
  name                      String?
  email                     String?   @unique
  emailVerified             DateTime?
  image                     String?
  password                  String?
  role                      String    @default("USER")
  bio                       String?
  website                   String?
  twitter                   String?
  linkedin                  String?
  permissionRequestStatus   String?
  permissionRequestMessage  String?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  accounts                  Account[]
  sessions                  Session[]
  posts                     Post[]
  reviews                   Review[]
  favoritePosts             FavoritePost[]
  likedPosts                Post[]      @relation("LikedPosts")
  dislikedPosts             Post[]      @relation("DislikedPosts")
}

model Post {
  id                    Int            @id @default(autoincrement())
  title                 String
  description           String
  posterUrl             String?
  year                  Int?
  duration              String?
  genres                String?
  imdbRating            Float?
  rottenTomatoesRating  Int?
  googleRating          Int?
  status                String
  viewCount             Int
  directors             String?
  mainCast              String?
  mediaLinks            String?
  authorId              String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  type                  PostType
  author                User           @relation(fields: [authorId], references: [id])
  reviews               Review[]
  subtitles             Subtitle[]
  favoritedBy           FavoritePost[]
  likedBy               User[]         @relation("LikedPosts")
  dislikedBy            User[]         @relation("DislikedPosts")
  episodes              Episode[]
  metaData              MetaData[]
}

model Episode {
  id          Int      @id @default(autoincrement())
  title       String
  season      Int
  episode     Int
  description String?
  post        Post     @relation(fields: [postId], references: [id])
  postId      Int
}

model MetaData {
  id      Int    @id @default(autoincrement())
  heading String
  value   String
  post    Post   @relation(fields: [postId], references: [id])
  postId  Int
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  uploaderName String
  filePath     String?
  createdAt    DateTime @default(now())
  post         Post     @relation(fields: [postId], references: [id])
  postId       Int
}

model FavoritePost {
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@id([userId, postId])
}

enum PostType {
  MOVIE
  TV_SERIES
  SONG
  NOVEL
  POEM
}

// OAUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
