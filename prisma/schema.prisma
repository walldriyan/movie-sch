// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Post {
  id                    Int              @id @default(autoincrement())
  title                 String
  description           String
  posterUrl             String?
  year                  Int?
  duration              String?
  genres                String?
  directors             String?
  mainCast              String?
  imdbRating            Float?
  rottenTomatoesRating  Int?
  googleRating          Int?
  viewCount             Int              @default(0)
  status                String           @default("DRAFT")
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  type                  PostType         @default(MOVIE)
  author                User             @relation(fields: [authorId], references: [id])
  authorId              String
  reviews               Review[]
  subtitles             Subtitle[]
  favoritePosts         FavoritePost[]
  likedBy               User[]           @relation("PostLikes")
  dislikedBy            User[]           @relation("PostDislikes")
  mediaLinks            MediaLink[]
  seriesId              Int?
  series                Series?          @relation(fields: [seriesId], references: [id])
  orderInSeries         Int?
  visibility            PostVisibility   @default(PUBLIC)
  groupId               Int?
  group                 Group?           @relation(fields: [groupId], references: [id], onDelete: SetNull)

  @@index([seriesId])
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  parentId  Int?
  parent    Review?  @relation("ReviewReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Review[] @relation("ReviewReplies")

  @@index([postId])
  @@index([userId])
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  url          String
  uploaderName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  postId       Int
  post         Post     @relation(fields: [postId], references: [id])

  @@index([postId])
}

model FavoritePost {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model User {
  id                      String         @id @default(cuid())
  name                    String?
  email                   String?        @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  bio                     String?
  website                 String?
  twitter                 String?
  linkedin                String?
  coverImage              String?
  role                    String         @default("USER")
  permissionRequestStatus String?        @default("NONE")
  permissionRequestMessage String?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  accounts                Account[]
  sessions                Session[]
  posts                   Post[]
  reviews                 Review[]
  favoritePosts           FavoritePost[]
  likedPosts              Post[]         @relation("PostLikes")
  dislikedPosts           Post[]         @relation("PostDislikes")
  createdSeries           Series[]
  createdGroups           Group[]
  groupMemberships        GroupMember[]
  sentGroupMessages       GroupMessage[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MediaLink {
  id     Int    @id @default(autoincrement())
  type   String // "trailer" or "image"
  url    String
  Post   Post?  @relation(fields: [postId], references: [id])
  postId Int?
}

model Series {
  id            Int      @id @default(autoincrement())
  title         String   @unique
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  posts         Post[]
  authorId      String
  author        User     @relation(fields: [authorId], references: [id])
}

model Group {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  status      GroupStatus    @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  authorId    String
  author      User           @relation(fields: [authorId], references: [id])
  members     GroupMember[]
  posts       Post[]
  messages    GroupMessage[]
}

model GroupMember {
  id        Int       @id @default(autoincrement())
  userId    String
  groupId   Int
  role      GroupRole @default(MEMBER)
  joinedAt  DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  group     Group     @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model GroupMessage {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  authorId  String
  groupId   Int
  author    User     @relation(fields: [authorId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
}

enum PostType {
  MOVIE
  TV_SERIES
  OTHER
}

enum PostVisibility {
  PUBLIC
  GROUP_ONLY
}

enum GroupStatus {
  ACTIVE
  INACTIVE
}

enum GroupRole {
  ADMIN
  MEMBER
}