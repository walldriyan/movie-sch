// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  USER_ADMIN
  USER
}

enum UserStatus {
  FREE
  PREMIUM
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole     @default(USER)
  status        UserStatus   @default(FREE)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  movies        Movie[]
  reviews       Review[]
  subtitles     Subtitle[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum MovieStatus {
  PUBLISHED
  PENDING_DELETION
  DELETED
}

model Movie {
  id              Int         @id @default(autoincrement())
  title           String
  description     String      @db.Text
  posterUrl       String?
  galleryImageIds String[]
  year            Int
  genres          String[]
  duration        String
  imdbRating      Float
  viewCount       Int         @default(0)
  likes           Int         @default(0)
  status          MovieStatus @default(PUBLISHED)
  authorId        String?
  author          User?       @relation(fields: [authorId], references: [id])
  reviews         Review[]
  subtitles       Subtitle[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String   @db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subtitle {
  id        Int      @id @default(autoincrement())
  language  String
  uploader  User     @relation(fields: [uploaderId], references: [id])
  uploaderId String
  price     Float    @default(0)
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
