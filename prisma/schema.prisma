// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Post {
  id                    String          @id @default(cuid())
  title                 String
  description           String
  posterUrl             String?
  year                  Int
  duration              String
  genres                String?
  imdbRating            Float
  rottenTomatoesRating  Int?
  googleRating          Int?
  status                String?         @default("DRAFT")
  viewCount             Int             @default(0)
  directors             String?
  mainCast              String?
  mediaLinks            String?
  authorId              String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  type                  PostType        @default(MOVIE)
  episodes              Episode[]
  metaData              MetaData[]

  author                User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reviews               Review[]
  favoritedBy           FavoritePost[]
  likedBy               User[]          @relation("LikedPosts")
  dislikedBy            User[]          @relation("DislikedPosts")
  subtitles             Subtitle[]

  @@index([authorId])
}

model Episode {
  id          String   @id @default(cuid())
  title       String
  description String?
  episodeNumber Int
  seasonNumber  Int
  releaseDate DateTime?
  posterUrl   String?
  postId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model MetaData {
  id      String @id @default(cuid())
  key     String
  value   String
  postId  String
  
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  bio           String?
  website       String?
  twitter       String?
  linkedin      String?
  permissionRequestStatus String?
  permissionRequestMessage String?

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  reviews       Review[]
  favoritePosts FavoritePost[]
  likedPosts    Post[]      @relation("LikedPosts")
  dislikedPosts Post[]      @relation("DislikedPosts")
  subtitles     Subtitle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id      String   @id @default(cuid())
  rating  Int
  comment String
  postId  String
  userId  String
  
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}

model FavoritePost {
  id      String @id @default(cuid())
  userId  String
  postId String

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Subtitle {
  id            String  @id @default(cuid())
  language      String
  uploaderName  String
  postId        String
  userId        String?
  filePath      String?

  post          Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  uploader      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}


enum PostType {
  MOVIE
  TV_SERIES
  SONG
  NOVEL
  POEM
  ARTICLE
}
