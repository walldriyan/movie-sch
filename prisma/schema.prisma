// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                       String    @id @default(cuid())
  name                     String
  username                 String?   @unique
  email                    String    @unique
  emailVerified            DateTime?
  password                 String
  image                    String?
  bio                      String?
  coverImage               String?
  website                  String?
  twitter                  String?
  linkedin                 String?
  role                     Role      @default(USER)
  status                   UserStatus @default(PENDING)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  permissionRequestStatus  String?
  permissionRequestMessage String?

  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  reviews           Review[]
  favoritePosts     FavoritePost[]
  likedPosts        Post[]            @relation("UserLikes")
  dislikedPosts     Post[]            @relation("UserDislikes")
  createdSeries     Series[]
  createdGroups     Group[]           @relation("CreatedBy")
  groups            GroupMember[]
  sentInvites       GroupInvite[]     @relation("SentInvites")
  receivedInvites   GroupInvite[]     @relation("ReceivedInvites")
  sentSuggestions   GroupSuggestion[] @relation("SentSuggestions")
  receivedSuggestions GroupSuggestion[] @relation("ReceivedSuggestions")
  notifications     UserNotification[]
  createdNotifications Notification[]
  blockedBy         UserBlock[]       @relation("BlockedUsers")
  blocking          UserBlock[]       @relation("BlockingUsers")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserBlock {
  id          String   @id @default(cuid())
  blockerId   String
  blockedId   String
  createdAt   DateTime @default(now())

  blocker     User     @relation("BlockingUsers", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked     User     @relation("BlockedUsers", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
}

model Post {
  id                   Int          @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  year                 Int?
  duration             String?
  genres               String?
  directors            String?
  mainCast             String?
  imdbRating           Float?
  rottenTomatoesRating Int?
  googleRating         Int?
  status               String       @default("DRAFT")
  viewCount            Int          @default(0)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  type                 PostType     @default(MOVIE)
  seriesId             Int?
  orderInSeries        Int?
  visibility           Visibility   @default(PUBLIC)
  groupId              Int?

  authorId      String
  author        User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  series        Series?      @relation(fields: [seriesId], references: [id], onDelete: SetNull)
  group         Group?       @relation(fields: [groupId], references: [id], onDelete: SetNull)
  reviews       Review[]
  subtitles     Subtitle[]
  favoritePosts FavoritePost[]
  mediaLinks    MediaLink[]
  likedBy       User[]       @relation("UserLikes")
  dislikedBy    User[]       @relation("UserDislikes")
}

model Series {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  
  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  posts  Post[]
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  url          String
  uploaderName String
  createdAt    DateTime @default(now())
  postId       Int

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int
  userId    String
  parentId  Int?

  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent Review?  @relation("ReviewReplies", fields: [parentId], references: [id])
  replies Review[] @relation("ReviewReplies")
}

model FavoritePost {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model MediaLink {
  id     Int    @id @default(autoincrement())
  type   String // "trailer" or "image"
  url    String
  postId Int

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Group {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  profilePhoto String?
  coverPhoto   String?
  status       GroupStatus @default(ACTIVE)
  visibility   GroupVisibility @default(PUBLIC)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdById  String

  createdBy   User              @relation("CreatedBy", fields: [createdById], references: [id])
  posts       Post[]
  members     GroupMember[]
  invites     GroupInvite[]
  suggestions GroupSuggestion[]
  permissions GroupPermission[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  role      GroupRole @default(MEMBER)
  status    MemberStatus @default(ACTIVE)
  joinedAt  DateTime @default(now())
  
  userId    String
  groupId   Int
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model GroupInvite {
  id          String   @id @default(cuid())
  status      InviteStatus @default(PENDING)
  createdAt   DateTime @default(now())
  
  groupId     Int
  senderId    String
  receiverId  String
  
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  sender      User     @relation("SentInvites", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceivedInvites", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([groupId, senderId, receiverId])
}

model GroupSuggestion {
  id              String   @id @default(cuid())
  status          SuggestionStatus @default(PENDING)
  createdAt       DateTime @default(now())

  groupId         Int
  suggestedById   String
  suggestedUserId String
  
  group           Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  suggestedBy     User     @relation("SentSuggestions", fields: [suggestedById], references: [id], onDelete: Cascade)
  suggestedUser   User     @relation("ReceivedSuggestions", fields: [suggestedUserId], references: [id], onDelete: Cascade)
}

model Notification {
  id           String   @id @default(cuid())
  title        String
  message      String
  type         NotificationType @default(SYSTEM)
  receiverType ReceiverType
  receiverId   String?  // Can be userId or groupId
  isRead       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  senderId     String?

  sender           User?    @relation(fields: [senderId], references: [id], onDelete: SetNull)
  userNotifications UserNotification[]
}

model UserNotification {
  id              String    @id @default(cuid())
  userId          String
  notificationId  String
  isRead          Boolean   @default(false)
  
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification    Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, notificationId])
}


model GroupPermission {
  id          Int      @id @default(autoincrement())
  role        GroupRole
  permissions Json
  
  groupId     Int
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, role])
}


enum Role {
  USER
  USER_ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  DISABLED
  PENDING
  DELETED
}

enum PostType {
  MOVIE
  TV_SERIES
  OTHER
}

enum Visibility {
  PUBLIC
  GROUP_ONLY
}

enum GroupStatus {
  ACTIVE
  DISABLED
  PENDING
  DELETED
}

enum GroupVisibility {
  PUBLIC
  PRIVATE
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum MemberStatus {
  ACTIVE
  DISABLED
  PENDING
  LEFT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum SuggestionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  SYSTEM
  ALERT
  INVITE
  SUGGESTION
  CUSTOM
}

enum ReceiverType {
  USER
  GROUP
  ALL
}
