// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  bio           String?
  website       String?
  twitter       String?
  linkedin      String?
  movies        Movie[]
  reviews       Review[]
  accounts      Account[]
  sessions      Session[]
}

model Movie {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  posterUrl   String?
  year        Int
  duration    String
  genres      String   // Stored as a JSON string
  imdbRating  Float
  viewCount   Int
  likes       Int
  status      String   @default("PUBLISHED") // e.g., PUBLISHED, PENDING_DELETION
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  reviews     Review[]
  subtitles   Subtitle[]
}

model Review {
  id        Int    @id @default(autoincrement())
  rating    Int
  comment   String
  movie     Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   Int
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Subtitle {
  id            Int    @id @default(autoincrement())
  language      String
  downloadUrl   String
  uploaderName  String
  movie         Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId       Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
