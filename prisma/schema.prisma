// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?
  coverImage    String?
  website       String?
  twitter       String?
  linkedin      String?

  role   Role   @default(USER)
  status Status @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  reviews       Review[]
  favoritePosts FavoritePost[]
  likedPosts    Post[]    @relation("UserLikes")
  dislikedPosts Post[]    @relation("UserDislikes")

  createdSeries Series[]

  groups      GroupMember[]
  invitesSent GroupInvite[]     @relation("InviteSender")
  invitesRcvd GroupInvite[]     @relation("InviteReceiver")
  suggested   GroupSuggestion[] @relation("SuggestedByUser")
  wasSuggested  GroupSuggestion[] @relation("SuggestedUser")

  blockedBy     UserBlock[] @relation("Blocked")
  blocking      UserBlock[] @relation("BlockedBy")

  notifications UserNotification[]
  sentNotifications Notification[] @relation("Sender")
  createdGroups Group[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  posterUrl            String?
  description          String
  year                 Int?
  duration             String?
  genres               String?
  directors            String?
  mainCast             String?
  imdbRating           Float?
  rottenTomatoesRating Int?
  googleRating         Int?
  
  viewCount   Int      @default(0)
  status      String   @default("DRAFT")
  
  type PostType @default(MOVIE)

  seriesId      Int?
  series        Series?        @relation(fields: [seriesId], references: [id])
  orderInSeries Int?

  reviews       Review[]
  subtitles     Subtitle[]
  favoritePosts FavoritePost[]
  likedBy       User[]         @relation("UserLikes")
  dislikedBy    User[]         @relation("UserDislikes")
  mediaLinks    MediaLink[]
  
  visibility String @default("PUBLIC")
  groupId    Int?
  group      Group? @relation(fields: [groupId], references: [id])

  @@index([seriesId])
}

model MediaLink {
    id     Int    @id @default(autoincrement())
    type   String // 'trailer' or 'image'
    url    String
    postId Int
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  url          String
  uploaderName String
  postId       Int
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId  Int?
  parent    Review?  @relation("ReviewReplies", fields: [parentId], references: [id])
  replies   Review[] @relation("ReviewReplies")
}


model FavoritePost {
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model Series {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Group {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  description   String?
  profilePhoto  String?
  coverPhoto    String?
  status        Status   @default(ACTIVE)
  visibility    GroupVisibility @default(PUBLIC)
  createdById   String
  createdBy     User     @relation(fields: [createdById], references: [id])
  members       GroupMember[]
  invites       GroupInvite[]
  suggestions   GroupSuggestion[]
  permissions   GroupPermission[]
  notifications Notification[]
  posts         Post[]
}

model GroupMember {
  id        Int       @id @default(autoincrement())
  userId    String
  groupId   Int
  role      GroupRole @default(MEMBER)
  status    MemberStatus @default(ACTIVE)
  joinedAt  DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  group     Group     @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model GroupInvite {
  id         Int        @id @default(autoincrement())
  groupId    Int
  senderId   String
  receiverId String
  status     InviteStatus @default(PENDING)
  createdAt  DateTime   @default(now())
  group      Group      @relation(fields: [groupId], references: [id])
  sender     User       @relation("InviteSender", fields: [senderId], references: [id])
  receiver   User       @relation("InviteReceiver", fields: [receiverId], references: [id])
}

model GroupSuggestion {
  id              Int              @id @default(autoincrement())
  groupId         Int
  suggestedById   String
  suggestedUserId String
  status          SuggestionStatus @default(PENDING)
  createdAt       DateTime         @default(now())
  group           Group            @relation(fields: [groupId], references: [id])
  suggestedBy     User             @relation("SuggestedByUser", fields: [suggestedById], references: [id])
  suggestedUser   User             @relation("SuggestedUser", fields: [suggestedUserId], references- [id])
}

model Notification {
  id             Int             @id @default(autoincrement())
  title          String
  message        String
  type           NotificationType @default(SYSTEM)
  senderId       String?
  sender         User?           @relation("Sender", fields: [senderId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  users          UserNotification[]
  targetGroup    Group?          @relation(fields: [targetGroupId], references: [id])
  targetGroupId  Int?
}

model UserNotification {
  id              Int          @id @default(autoincrement())
  userId          String
  notificationId  Int
  status          NotificationStatus @default(UNREAD)
  isDeleted       Boolean      @default(false)
  isUndone        Boolean      @default(false)
  isHidden        Boolean      @default(false)
  user            User         @relation(fields: [userId], references: [id])
  notification    Notification @relation(fields: [notificationId], references: [id])
}

model GroupPermission {
  id          Int       @id @default(autoincrement())
  groupId     Int
  role        GroupRole
  permissions Json
  group       Group     @relation(fields: [groupId], references: [id])

  @@unique([groupId, role])
}

model UserBlock {
  blockerId String
  blockedId String
  createdAt DateTime @default(now())

  blocker   User     @relation("BlockedBy", fields: [blockerId], references: [id])
  blocked   User     @relation("Blocked", fields: [blockedId], references: [id])

  @@id([blockerId, blockedId])
}


enum PostType {
  MOVIE
  TV_SERIES
  OTHER
}

enum Role {
  USER
  USER_ADMIN
  SUPER_ADMIN
}

enum Status {
  ACTIVE
  DISABLED
  PENDING
  DELETED
}

enum GroupVisibility {
  PUBLIC
  PRIVATE
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum MemberStatus {
  ACTIVE
  DISABLED
  PENDING
  LEFT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum SuggestionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  SYSTEM
  ALERT
  INVITE
  SUGGESTION
  CUSTOM
}

enum NotificationStatus {
  UNREAD
  READ
}
