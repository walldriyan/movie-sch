// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
  engineType = "library"
}

datasource db {
  provider = "sqlite"
   url      = env("DATABASE_URL")
}

model User {
  id                      String           @id @default(cuid())
  name                    String?
  username                String?          @unique
  email                   String?          @unique
  emailVerified           DateTime?
  image                   String?
  bio                     String?
  coverImage              String?
  website                 String?
  twitter                 String?
  linkedin                String?
  password                String?
  role                    Role             @default(USER)
  status                  UserStatus       @default(PENDING)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  permissionRequestStatus String?
  permissionRequestMessage String?
  dailyPostLimit          Int? 

 accountType             AccountType      @default(FREE)

  accounts                Account[]
  sessions                Session[]
  posts                   Post[]
  reviews                 Review[]
  favoritePosts           FavoritePost[]
  likedPosts              Post[]           @relation("UserLikes")
  dislikedPosts           Post[]           @relation("UserDislikes")
  createdSeries           Series[]
  groups                  GroupMember[]
  userNotifications       UserNotification[]
  createdNotifications    Notification[]   @relation("NotificationSender")
  createdGroups           Group[]

  blockedBy               User[]           @relation("UserBlocks")
  blocking                User[]           @relation("UserBlocks")
  
  sentInvites             GroupInvite[]    @relation("SentInvites")
  receivedInvites         GroupInvite[]    @relation("ReceivedInvites")

  suggestedBy             GroupSuggestion[] @relation("SuggestedByUser")
  suggestedUser           GroupSuggestion[] @relation("SuggestedUser")

  examSubmissions         ExamSubmission[]
  subtitles               Subtitle[]



   
 
  

  feedback                Feedback[]
  feedbackReplies         FeedbackReply[]
  microPosts              MicroPost[]
  microPostLikes          MicroPostLike[]
  microPostComments       MicroPostComment[]



  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id                    Int              @id @default(autoincrement())
  title                 String
  description           String
  posterUrl             String?
  year                  Int?
  duration              String?
  genres                String?
  directors             String?
  mainCast              String?
  imdbRating            Float?
  rottenTomatoesRating  Int?
  googleRating          Int?
  viewCount             Int              @default(0)
  status                String           @default("DRAFT")
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  visibility            PostVisibility   @default(PUBLIC)
  type                  PostType         @default(MOVIE)
  orderInSeries         Int?



  isLockedByDefault   Boolean  @default(false)
  requiresExamToUnlock Boolean @default(false)
  

  authorId              String
  author                User             @relation(fields: [authorId], references: [id], onDelete: Cascade)

  seriesId              Int?
  series                Series?          @relation(fields: [seriesId], references: [id])

  groupId               String?
  group                 Group?           @relation(fields: [groupId], references: [id])
  
  reviews               Review[]
  subtitles             Subtitle[]
  favoritePosts         FavoritePost[]
  mediaLinks            MediaLink[]
  episodes              Episode[]
  metaData              MetaData[]

  likedBy               User[]           @relation("UserLikes")
  dislikedBy            User[]           @relation("UserDislikes")

  exam                  Exam?

  @@map("posts")
}

model Subtitle {
  id            Int      @id @default(autoincrement())
  language      String
  url           String
  uploaderName  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  postId        Int
  userId        String?
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("subtitles")
}

model FavoritePost {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("favorite_posts")
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  postId    Int
  parentId  Int?

  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent Review?  @relation("ReviewReplies", fields: [parentId], references: [id], onUpdate: NoAction)
  replies Review[] @relation("ReviewReplies")
  
  @@map("reviews")
}

model Episode {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  episodeNumber Int
  seasonNumber  Int
  releaseDate DateTime
  
  postId      Int
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("episodes")
}

model MediaLink {
  id     Int      @id @default(autoincrement())
  type   String // e.g., 'trailer', 'image'
  url    String

  postId Int
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("media_links")
}

model MetaData {
  id     Int      @id @default(autoincrement())
  key    String
  value  String
  
  postId Int
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("meta_data")
}

model Series {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  posts       Post[]
  
  @@map("series")
}

model Group {
  id              String           @id @default(cuid())
  name            String
  description     String?
  profilePhoto    String?
  coverPhoto      String?
  status          GroupStatus      @default(ACTIVE)
  visibility      GroupVisibility  @default(PUBLIC)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  exams             Exam[]
  createdById     String
  createdBy       User             @relation(fields: [createdById], references: [id])
  
  members         GroupMember[]
  invites         GroupInvite[]
  suggestions     GroupSuggestion[]
  permissions     GroupPermission[]
  posts           Post[]
  notifications   Notification[]
  
  @@map("groups")
}

model GroupMember {
  id        String        @id @default(cuid())
  role      GroupRole     @default(MEMBER)
  status    GroupMemberStatus @default(ACTIVE)
  joinedAt  DateTime      @default(now())

  userId    String
  groupId   String

  user      User          @relation(fields: [userId], references: [id])
  group     Group         @relation(fields: [groupId], references: [id])
  
  @@unique([userId, groupId])
  @@map("group_members")
}

model GroupInvite {
  id          String        @id @default(cuid())
  status      InviteStatus  @default(PENDING)
  createdAt   DateTime      @default(now())

  groupId     String
  senderId    String
  receiverId  String

  group       Group         @relation(fields: [groupId], references: [id])
  sender      User          @relation("SentInvites", fields: [senderId], references: [id])
  receiver    User          @relation("ReceivedInvites", fields: [receiverId], references: [id])

  @@map("group_invites")
}

model GroupSuggestion {
  id              String            @id @default(cuid())
  status          SuggestionStatus  @default(PENDING)
  createdAt       DateTime          @default(now())
  
  groupId         String
  suggestedById   String
  suggestedUserId String
  
  group           Group            @relation(fields: [groupId], references: [id])
  suggestedBy     User             @relation("SuggestedByUser", fields: [suggestedById], references: [id])
  suggestedUser   User             @relation("SuggestedUser", fields: [suggestedUserId], references: [id])
  
  @@map("group_suggestions")
}

model Notification {
  id              String            @id @default(cuid())
  title           String
  message         String
  type            NotificationType
  targetId        String?
  status          NotificationStatus @default(UNREAD)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  senderId        String?
  sender          User?             @relation("NotificationSender", fields: [senderId], references: [id])
  
  users           UserNotification[]
  targetGroup     Group?            @relation(fields: [targetId], references: [id])
  
  @@map("notifications")
}

model UserNotification {
  id              String            @id @default(cuid())
  status          NotificationStatus @default(UNREAD)
  
  userId          String
  notificationId  String
  
  user            User              @relation(fields: [userId], references: [id])
  notification    Notification      @relation(fields: [notificationId], references: [id])
  
  @@unique([userId, notificationId])
  @@map("user_notifications")
}

model GroupPermission {
  id          String    @id @default(cuid())
  role        GroupRole
  permissions Json
  
  groupId     String
  group       Group     @relation(fields: [groupId], references: [id])
  
  @@map("group_permissions")
}

// --- EXAM MODELS ---

model Exam {
  id              Int               @id @default(autoincrement())
  title           String
  description     String?
  status          ExamStatus        @default(DRAFT)
  durationMinutes Int?
  attemptsAllowed Int               @default(1)
  startDate       DateTime?
  endDate         DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  postId          Int?               @unique
  post            Post?              @relation(fields: [postId], references: [id], onDelete: Cascade)
 groupId           String?
  group             Group?  @relation(fields: [groupId], references: [id])
  questions       Question[]
  submissions     ExamSubmission[]
}
enum QuestionType {
  MCQ                  // Multiple Choice Question (පවතින ක්‍රමය)
  IMAGE_BASED_ANSWER   // New image-based custom answer question
}

model QuestionImage {
  id         Int      @id @default(autoincrement())
  url        String   // No @db.Text needed for SQLite
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}
model SubmissionAnswer {
  id               Int              @id @default(autoincrement())
  submissionId     Int
  submission       ExamSubmission   @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId       Int
  question         Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptionId Int?
  selectedOption   QuestionOption?  @relation(fields: [selectedOptionId], references: [id], onDelete: SetNull)

  // Fields for custom answers and manual grading
  customAnswer   String?          // No @db.Text needed for SQLite
  marksAwarded   Int?
  feedback       String?          // No @db.Text needed for SQLite
}

model Question {
  id               Int                @id @default(autoincrement())
  text             String
  points           Int
  isMultipleChoice Boolean            @default(false)
  examId           Int
  exam             Exam               @relation(fields: [examId], references: [id], onDelete: Cascade)
  options          QuestionOption[]
  answers          SubmissionAnswer[]

  // Relation to the new QuestionImage model
  images           QuestionImage[]

  // Type of the question (MCQ or Image-based)
  type             QuestionType       @default(MCQ)
}

model QuestionOption {
  id          Int     @id @default(autoincrement())
  text        String
  isCorrect   Boolean @default(false)
  
  questionId  Int
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  submissionAnswers SubmissionAnswer[]
}

model ExamSubmission {
  id          Int       @id @default(autoincrement())
  score       Int
  submittedAt DateTime  @default(now())
  timeTakenSeconds Int
  attemptCount Int @default(1)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  examId      Int
  exam        Exam      @relation(fields: [examId], references: [id], onDelete: Cascade)

  answers     SubmissionAnswer[]
  

}



// --- ENUMS ---

enum Role {
  USER
  USER_ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  DISABLED
  PENDING
  DELETED
}

enum PostVisibility {
  PUBLIC
  GROUP_ONLY
}

enum PostType {
  MOVIE
  TV_SERIES
  OTHER
}

enum GroupStatus {
  ACTIVE
  DISABLED
  PENDING
  DELETED
}

enum GroupVisibility {
  PUBLIC
  PRIVATE
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum GroupMemberStatus {
  ACTIVE
  DISABLED
  PENDING
  LEFT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum SuggestionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  SYSTEM
  ALERT
  INVITE
  SUGGESTION
  CUSTOM
}

enum NotificationStatus {
  UNREAD
  READ
  DELETED
}

enum NotificationTargetType {
  USER
  GROUP
  ROLE
}

enum ExamStatus {
  DRAFT
  ACTIVE
  INACTIVE
}

enum FeedbackStatus {
  UNREAD
  READ
  CLOSED
}

// =============================================================
// NEW MODELS AND ENUMS (Copy and paste this entire block at the end of your schema file)
// =============================================================

// Enum for User Account Types
enum AccountType {
  FREE
  PREMIUM
  HYBRID
}

// For system-wide settings like post limits
model AppSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String

  @@map("app_settings")
}

// For user feedback
model Feedback {
  id          String         @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  status      FeedbackStatus @default(UNREAD)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  replies     FeedbackReply[]

  @@map("feedbacks")
}

// For replies to feedback
model FeedbackReply {
  id         String   @id @default(cuid())
  message    String
  createdAt  DateTime @default(now())

  feedbackId String
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("feedback_replies")
}

// For "Micro-Tweets"
model MicroPost {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  images    MicroPostImage[]
  links     MicroPostLink[]

  viewCount Int                @default(0)
  likes     MicroPostLike[]
  comments  MicroPostComment[]

  categoryId String?
  category   MicroPostCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("micro_posts")
}

model MicroPostImage {
  id          String    @id @default(cuid())
  url         String
  microPostId String
  microPost   MicroPost @relation(fields: [microPostId], references: [id], onDelete: Cascade)

  @@map("micro_post_images")
}

model MicroPostLink {
  id          String    @id @default(cuid())
  url         String
  title       String?
  microPostId String
  microPost   MicroPost @relation(fields: [microPostId], references: [id], onDelete: Cascade)

  @@map("micro_post_links")
}

model MicroPostCategory {
  id    String      @id @default(cuid())
  name  String      @unique
  posts MicroPost[]

  @@map("micro_post_categories")
}

model MicroPostLike {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  userId      String
  microPostId String

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  microPost   MicroPost @relation(fields: [microPostId], references: [id], onDelete: Cascade)

  @@unique([userId, microPostId])
  @@map("micro_post_likes")
}

model MicroPostComment {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())

  userId      String
  microPostId String

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  microPost   MicroPost @relation(fields: [microPostId], references: [id], onDelete: Cascade)

  @@map("micro_post_comments")
}