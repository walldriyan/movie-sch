datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Movie {
  id                    Int       @id @default(autoincrement())
  title                 String
  description           String
  posterUrl             String?
  year                  Int
  duration              String
  genres                String // Stored as a JSON string: "[\"Action\", \"Sci-Fi\"]"
  directors             String?
  mainCast              String?
  imdbRating            Float
  rottenTomatoesRating  Int?
  googleRating          Int?
  status                String?
  viewCount             Int       @default(0)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  author                User      @relation(fields: [authorId], references: [id])
  authorId              String
  reviews               Review[]
  subtitles             Subtitle[]
  likedBy               User[]    @relation("MovieLikes")
  dislikedBy            User[]    @relation("MovieDislikes")
  mediaLinks            String?   // Stored as a JSON string: "[{\"type\":\"trailer\",\"url\":\"...\"}]"
}

model Review {
  id        Int      @id @default(autoinvert())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  fileUrl      String
  uploaderName String
  createdAt    DateTime @default(now())
  movie        Movie    @relation(fields: [movieId], references: [id])
  movieId      Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  password                String?
  image                   String?
  bio                     String?
  website                 String?
  twitter                 String?
  linkedin                String?
  role                    String    @default("USER")
  permissionRequestStatus String?   @default("NONE")
  permissionRequestMessage String?
  accounts                Account[]
  sessions                Session[]
  movies                  Movie[]
  reviews                 Review[]
  likedMovies             Movie[]   @relation("MovieLikes")
  dislikedMovies          Movie[]   @relation("MovieDislikes")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
