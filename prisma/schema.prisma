// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Post {
  id                    Int           @id @default(autoincrement())
  title                 String
  description           String
  posterUrl             String?
  year                  Int?
  duration              String?
  genres                String?
  imdbRating            Float?
  rottenTomatoesRating  Int?
  googleRating          Int?
  viewCount             Int           @default(0)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  status                String?
  type                  PostType      @default(MOVIE)
  directors             String?
  mainCast              String?
  mediaLinks            String?

  authorId              String
  author                User          @relation(fields: [authorId], references: [id])

  reviews               Review[]
  subtitles             Subtitle[]
  favoritedBy           FavoritePost[]

  likedBy               User[]        @relation("LikedPosts")
  dislikedBy            User[]        @relation("DislikedPosts")
  
  episodes              Episode[]
  metaData              MetaData[]
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Subtitle {
  id            Int      @id @default(autoincrement())
  language      String
  uploaderName  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  filePath      String?

  postId        Int
  post          Post     @relation(fields: [postId], references: [id])
}

model Episode {
  id          Int     @id @default(autoincrement())
  title       String
  episodeNumber Int
  seasonNumber  Int
  releaseDate DateTime?
  description String?
  
  postId      Int
  post        Post    @relation(fields: [postId], references: [id])
}

model MetaData {
  id          Int     @id @default(autoincrement())
  heading     String
  value       String
  
  postId      Int
  post        Post    @relation(fields: [postId], references: [id])
}

enum PostType {
  MOVIE
  TV_SERIES
  SONG
  NOVEL
  POEM
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  permissionRequestStatus String? @default("NONE")
  permissionRequestMessage String?

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  reviews       Review[]
  favoritePosts FavoritePost[]
  likedPosts    Post[]    @relation("LikedPosts")
  dislikedPosts Post[]    @relation("DislikedPosts")

  bio           String?
  website       String?
  twitter       String?
  linkedin      String?
}
 
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
 
  @@unique([identifier, token])
}

model FavoritePost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id])

  postId    Int
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}
