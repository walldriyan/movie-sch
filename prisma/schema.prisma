// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Role {
  USER
  USER_ADMIN
  SUPER_ADMIN
}

enum PostType {
  MOVIE
  TV_SERIES
  OTHER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  PENDING_APPROVAL
  PENDING_DELETION
  PRIVATE
}

enum Visibility {
  PUBLIC
  GROUP_ONLY
}

enum PermissionRequestStatus {
  NONE
  PENDING
  APPROVED
  REJECTED
}


model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    String    @default("USER")
  permissionRequestStatus String?   @default("NONE")
  permissionRequestMessage String?
  bio                     String?
  website                 String?
  twitter                 String?
  linkedin                String?
  coverImage              String?

  accounts                Account[]
  sessions                Session[]
  posts                   Post[]    @relation("PostAuthor")
  reviews                 Review[]
  favoritePosts           FavoritePost[]
  likedPosts              Post[]    @relation("UserLikes")
  dislikedPosts           Post[]    @relation("UserDislikes")
  
  createdGroups           Group[]   @relation("GroupAuthor")
  groupMemberships        GroupMember[]
  
  notificationsSent       Notification[]
  userNotifications       UserNotification[]

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id                   Int          @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  authorId             String
  author               User         @relation("PostAuthor", fields: [authorId], references: [id])
  status               String       @default("DRAFT")
  viewCount            Int          @default(0)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  
  year                 Int?
  duration             String?
  genres               String?
  directors            String?
  mainCast             String?
  imdbRating           Float?
  rottenTomatoesRating Int?
  googleRating         Int?

  type                 PostType     @default(MOVIE)

  seriesId             Int?
  series               Series?      @relation(fields: [seriesId], references: [id])
  orderInSeries        Int?

  reviews              Review[]
  subtitles            Subtitle[]
  favoritePosts        FavoritePost[]
  
  likedBy              User[]       @relation("UserLikes")
  dislikedBy           User[]       @relation("UserDislikes")
  
  mediaLinks           MediaLink[]
  
  // Access Control
  visibility           Visibility   @default(PUBLIC)
  groupId              Int?
  group                Group?       @relation(fields: [groupId], references: [id])

  @@index([authorId])
  @@index([seriesId])
  @@index([groupId])
}

model MediaLink {
  id      Int    @id @default(autoincrement())
  postId  Int
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  type    String // "trailer" or "image"
  url     String
}


model Series {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  authorId    String
  posts       Post[]
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([authorId])
}


model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  parentId  Int?
  parent    Review?  @relation("ReviewReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Review[] @relation("ReviewReplies")

  @@index([userId])
  @@index([postId])
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  url          String
  uploaderName String
  postId       Int
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@index([postId])
}

model FavoritePost {
  userId    String
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, postId])
}

// Models for group-based access control
model Group {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  authorId    String
  author      User     @relation("GroupAuthor", fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  
  posts       Post[]
  members     GroupMember[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  groupId   Int
  userId    String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String   // e.g., 'ADMIN', 'MEMBER'
  joinedAt  DateTime @default(now())

  @@unique([groupId, userId])
}

// Independent models for direct notifications
model Notification {
  id          Int      @id @default(autoincrement())
  title       String
  message     String
  createdAt   DateTime @default(now())
  authorId    String
  groupId     Int?
  
  userNotifications UserNotification[]
}

model UserNotification {
  id              Int      @id @default(autoincrement())
  userId          String
  notificationId  Int
  isRead          Boolean  @default(false)
  
  notification    Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
}

// Unused models from original schema
model Episode {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  episodeNumber Int
  seasonNumber Int
  releaseDate DateTime?
  duration    Int?      // in minutes
  posterUrl   String?
  seriesId    Int
}

model MetaData {
  id        Int      @id @default(autoincrement())
  key       String
  value     String
  postId    Int
}
