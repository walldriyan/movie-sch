// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]

  role                     String  @default("USER")
  permissionsRequestStatus String?
  permissionRequestMessage String?
  bio                      String?
  website                  String?
  twitter                  String?
  linkedin                 String?

  posts         Post[]
  reviews       Review[]
  favoritePosts FavoritePost[]
  likedPosts    Post[]         @relation("LikedPosts")
  dislikedPosts Post[]         @relation("DislikedPosts")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PostType {
  MOVIE
  TV_SERIES
  OTHER
}

model Post {
  id                   Int            @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  year                 Int?
  duration             String?
  genres               String?
  directors            String?
  mainCast             String?
  imdbRating           Float?
  rottenTomatoesRating Int?
  googleRating         Int?
  status               String         @default("DRAFT")
  viewCount            Int            @default(0)
  type                 PostType       @default(MOVIE)
  orderInSeries        Int?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  reviews       Review[]
  subtitles     Subtitle[]
  favoritePosts FavoritePost[]
  mediaLinks    MediaLink[]

  likedBy    User[] @relation("LikedPosts")
  dislikedBy User[] @relation("DislikedPosts")

  series   Series? @relation(fields: [seriesId], references: [id])
  seriesId Int?

  episodes Episode[]
  metaData MetaData[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Series {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  posterUrl   String?
  posts       Post[]
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Episode {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  episodeNumber Int
  seasonNumber  Int
  releaseDate   DateTime?
  duration      String?
  posterUrl     String?
  postId        Int
  post          Post     @relation(fields: [postId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model MetaData {
  id     Int     @id @default(autoincrement())
  key    String
  value  String
  type   String? // e.g., 'rating', 'info', 'link'
  postId Int
  post   Post    @relation(fields: [postId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Int
  createdAt DateTime @default(now())

  post   Post @relation(fields: [postId], references: [id])
  postId Int

  user   User @relation(fields: [userId], references: [id])
  userId String

  parent   Review?  @relation("ReviewReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId Int?
  replies  Review[] @relation("ReviewReplies")
}

model Subtitle {
  id           Int    @id @default(autoincrement())
  language     String
  url          String
  uploaderName String

  post   Post @relation(fields: [postId], references: [id])
  postId Int
}

model FavoritePost {
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model MediaLink {
  id     Int    @id @default(autoincrement())
  type   String // 'trailer' or 'image'
  url    String
  post   Post   @relation(fields: [postId], references: [id])
  postId Int
}
