generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id                    Int              @id @default(autoincrement())
  title                 String
  description           String
  posterUrl             String?
  year                  Int?
  duration              String?
  genres                String?
  directors             String?
  mainCast              String?
  imdbRating            Float?
  rottenTomatoesRating  Int?
  googleRating          Int?
  status                String           @default("DRAFT")
  viewCount             Int              @default(0)
  authorId              String
  author                User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  reviews               Review[]
  subtitles             Subtitle[]
  favoritePosts         FavoritePost[]
  type                  PostType         @default(MOVIE)
  seriesId              Int?
  series                Series?          @relation(fields: [seriesId], references: [id])
  orderInSeries         Int?
  mediaLinks            MediaLink[]
  episodes              Episode[]
  metaData              MetaData[]
  likedBy               User[]           @relation("LikedBy")
  dislikedBy            User[]           @relation("DislikedBy")
}

model Series {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Episode {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  episodeNumber Int
  seasonNumber  Int
  postId      Int
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MediaLink {
  id        Int      @id @default(autoincrement())
  type      String // e.g., 'trailer', 'image'
  url       String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model MetaData {
  id        Int      @id @default(autoincrement())
  key       String
  value     String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  permissionRequestStatus String? @default("NONE")
  permissionRequestMessage String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  reviews       Review[]
  favoritePosts FavoritePost[]
  likedPosts    Post[]    @relation("LikedBy")
  dislikedPosts Post[]    @relation("DislikedBy")
  updatedAt     DateTime  @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  postId    Int
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  url          String
  uploaderName String
  postId       Int
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
}

model FavoritePost {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

enum PostType {
  MOVIE
  TV_SERIES
  OTHER
}
