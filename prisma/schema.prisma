// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Post {
  id                   Int            @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  year                 Int?
  duration             String?
  genres               String? // Comma-separated
  directors            String?
  mainCast             String?
  imdbRating           Float?
  rottenTomatoesRating Int?
  googleRating         Int?
  status               String         @default("DRAFT")
  viewCount            Int            @default(0)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  type                 PostType       @default(MOVIE)
  mediaLinks           String?
  episodes             Episode[]
  metaData             MetaData[]
  author               User           @relation(fields: [authorId], references: [id])
  authorId             String
  reviews              Review[]
  subtitles            Subtitle[]
  favoritedBy          FavoritePost[]
  likedBy              User[]         @relation("LikedPosts")
  dislikedBy           User[]         @relation("DislikedPosts")
}

model Episode {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  episodeNo   Int
  seasonNo    Int
  releaseDate DateTime?
  post        Post     @relation(fields: [postId], references: [id])
  postId      Int
}

model MetaData {
  id     Int     @id @default(autoincrement())
  key    String
  value  String
  post   Post    @relation(fields: [postId], references: [id])
  postId Int
}

enum PostType {
  MOVIE
  TV_SERIES
  SONG
  OTHER
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Subtitle {
  id            Int      @id @default(autoincrement())
  language      String
  url           String
  uploaderName  String
  downloadCount Int      @default(0)
  createdAt     DateTime @default(now())
  post          Post     @relation(fields: [postId], references: [id])
  postId        Int
}

// Model for NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    String    @default("USER")
  permissionRequestStatus String?
  permissionRequestMessage String?
  bio                     String?
  website                 String?
  twitter                 String?
  linkedin                String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  reviews       Review[]
  favoritePosts FavoritePost[]
  likedPosts    Post[]         @relation("LikedPosts")
  dislikedPosts Post[]         @relation("DislikedPosts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FavoritePost {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}
