// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum PostType {
  MOVIE
  TV_SERIES
  SUBTITLE
  REVIEW
}

model Post {
  id                    Int             @id @default(autoincrement())
  title                 String
  description           String
  posterUrl             String?
  year                  Int?
  duration              String?
  genres                String?
  imdbRating            Float?
  rottenTomatoesRating  Int?
  googleRating          Int?
  status                String          @default("DRAFT")
  viewCount             Int             @default(0)
  authorId              String
  author                User            @relation(fields: [authorId], references: [id])
  type                  PostType        @default(MOVIE)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  reviews       Review[]
  subtitles     Subtitle[]
  mediaLinks    String?
  directors     String?
  mainCast      String?
  episodes      Episode[]
  metaData      MetaData[]
  
  favoritedBy   FavoritePost[]
  likedBy       User[]         @relation("LikedPosts")
  dislikedBy    User[]         @relation("DislikedPosts")

  @@index([authorId])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([postId])
  @@index([userId])
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  downloadUrl  String
  uploaderName String
  createdAt    DateTime @default(now())

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  @@index([postId])
}

model MediaLink {
  id      Int    @id @default(autoincrement())
  postId  Int
  post    Post   @relation(fields: [postId], references: [id])
  type    String // 'trailer' or 'image'
  url     String

  @@index([postId])
}

model Episode {
  id             Int    @id @default(autoincrement())
  postId         Int
  post           Post   @relation(fields: [postId], references: [id])
  seasonNumber   Int
  episodeNumber  Int
  title          String
  description    String?
  releaseDate    DateTime?

  @@index([postId])
}

model MetaData {
  id      Int    @id @default(autoincrement())
  postId  Int
  post    Post   @relation(fields: [postId], references: [id])
  key     String
  value   String

  @@index([postId])
}


model FavoritePost {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}


// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  permissionRequestStatus String? @default("NONE")
  permissionRequestMessage String?
  bio           String?
  website       String?
  twitter       String?
  linkedin      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  reviews       Review[]
  favoritePosts FavoritePost[]
  likedPosts    Post[]    @relation("LikedPosts")
  dislikedPosts Post[]    @relation("DislikedPosts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}