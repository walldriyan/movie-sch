
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                      String           @id @default(cuid())
  name                    String?
  username                String?          @unique
  email                   String?          @unique
  emailVerified           DateTime?
  image                   String?
  bio                     String?
  coverImage              String?
  website                 String?
  twitter                 String?
  linkedin                String?
  password                String?
  role                    Role             @default(USER)
  status                  UserStatus       @default(PENDING)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  permissionRequestStatus String?
  permissionRequestMessage String?

  accounts                Account[]
  sessions                Session[]
  posts                   Post[]
  reviews                 Review[]
  favoritePosts           FavoritePost[]
  likedPosts              Post[]           @relation("UserLikes")
  dislikedPosts           Post[]           @relation("UserDislikes")
  createdSeries           Series[]
  groups                  GroupMember[]
  userNotifications       UserNotification[]
  createdNotifications    Notification[]   @relation("NotificationSender")
  createdGroups           Group[]

  blockedBy               User[]           @relation("UserBlocks")
  blocking                User[]           @relation("UserBlocks")
  
  sentInvites             GroupInvite[]    @relation("SentInvites")
  receivedInvites         GroupInvite[]    @relation("ReceivedInvites")

  suggestedBy             GroupSuggestion[] @relation("SuggestedByUser")
  suggestedUser           GroupSuggestion[] @relation("SuggestedUser")
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id                    Int              @id @default(autoincrement())
  title                 String
  description           String
  posterUrl             String?
  year                  Int?
  duration              String?
  genres                String?
  directors             String?
  mainCast              String?
  imdbRating            Float?
  rottenTomatoesRating  Int?
  googleRating          Int?
  viewCount             Int              @default(0)
  status                String           @default("DRAFT")
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  visibility            PostVisibility   @default(PUBLIC)
  type                  PostType         @default(MOVIE)
  orderInSeries         Int?

  authorId              String
  author                User             @relation(fields: [authorId], references: [id], onDelete: Cascade)

  seriesId              Int?
  series                Series?          @relation(fields: [seriesId], references: [id])

  groupId               String?
  group                 Group?           @relation(fields: [groupId], references: [id])
  
  reviews               Review[]
  subtitles             Subtitle[]
  favoritePosts         FavoritePost[]
  mediaLinks            MediaLink[]
  episodes              Episode[]
  metaData              MetaData[]

  likedBy               User[]           @relation("UserLikes")
  dislikedBy            User[]           @relation("UserDislikes")

  @@map("posts")
}

model Subtitle {
  id            Int      @id @default(autoincrement())
  language      String
  url           String
  uploaderName  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  postId        Int
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("subtitles")
}

model FavoritePost {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("favorite_posts")
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  postId    Int
  parentId  Int?

  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent Review?  @relation("ReviewReplies", fields: [parentId], references: [id], onUpdate: NoAction)
  replies Review[] @relation("ReviewReplies")
  
  @@map("reviews")
}

model Episode {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  episodeNumber Int
  seasonNumber  Int
  releaseDate DateTime
  
  postId      Int
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("episodes")
}

model MediaLink {
  id     Int      @id @default(autoincrement())
  type   String // e.g., 'trailer', 'image'
  url    String

  postId Int
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("media_links")
}

model MetaData {
  id     Int      @id @default(autoincrement())
  key    String
  value  String
  
  postId Int
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("meta_data")
}

model Series {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  posts       Post[]
  
  @@map("series")
}

model Group {
  id              String           @id @default(cuid())
  name            String
  description     String?
  profilePhoto    String?
  coverPhoto      String?
  status          GroupStatus      @default(ACTIVE)
  visibility      GroupVisibility  @default(PUBLIC)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  createdById     String
  createdBy       User             @relation(fields: [createdById], references: [id])
  
  members         GroupMember[]
  invites         GroupInvite[]
  suggestions     GroupSuggestion[]
  permissions     GroupPermission[]
  posts           Post[]
  
  @@map("groups")
}

model GroupMember {
  id        String        @id @default(cuid())
  role      GroupRole     @default(MEMBER)
  status    GroupMemberStatus @default(ACTIVE)
  joinedAt  DateTime      @default(now())

  userId    String
  groupId   String

  user      User          @relation(fields: [userId], references: [id])
  group     Group         @relation(fields: [groupId], references: [id])
  
  @@unique([userId, groupId])
  @@map("group_members")
}

model GroupInvite {
  id          String        @id @default(cuid())
  status      InviteStatus  @default(PENDING)
  createdAt   DateTime      @default(now())

  groupId     String
  senderId    String
  receiverId  String

  group       Group         @relation(fields: [groupId], references: [id])
  sender      User          @relation("SentInvites", fields: [senderId], references: [id])
  receiver    User          @relation("ReceivedInvites", fields: [receiverId], references: [id])

  @@map("group_invites")
}

model GroupSuggestion {
  id              String            @id @default(cuid())
  status          SuggestionStatus  @default(PENDING)
  createdAt       DateTime          @default(now())
  
  groupId         String
  suggestedById   String
  suggestedUserId String
  
  group           Group            @relation(fields: [groupId], references: [id])
  suggestedBy     User             @relation("SuggestedByUser", fields: [suggestedById], references: [id])
  suggestedUser   User             @relation("SuggestedUser", fields: [suggestedUserId], references: [id])
  
  @@map("group_suggestions")
}

model Notification {
  id              String            @id @default(cuid())
  title           String
  message         String
  type            NotificationType  @default(CUSTOM)
  status          NotificationStatus @default(UNREAD)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  senderId        String?
  sender          User?             @relation("NotificationSender", fields: [senderId], references: [id])
  
  users           UserNotification[]
  
  @@map("notifications")
}

model UserNotification {
  id              String            @id @default(cuid())
  status          NotificationStatus @default(UNREAD)
  
  userId          String
  notificationId  String
  
  user            User              @relation(fields: [userId], references: [id])
  notification    Notification      @relation(fields: [notificationId], references: [id])
  
  @@unique([userId, notificationId])
  @@map("user_notifications")
}

model GroupPermission {
  id          String    @id @default(cuid())
  role        GroupRole
  permissions Json
  
  groupId     String
  group       Group     @relation(fields: [groupId], references: [id])
  
  @@map("group_permissions")
}


enum Role {
  USER
  USER_ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  DISABLED
  PENDING
  DELETED
}

enum PostVisibility {
  PUBLIC
  GROUP_ONLY
}

enum PostType {
  MOVIE
  TV_SERIES
  OTHER
}

enum GroupStatus {
  ACTIVE
  DISABLED
  PENDING
  DELETED
}

enum GroupVisibility {
  PUBLIC
  PRIVATE
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum GroupMemberStatus {
  ACTIVE
  DISABLED
  PENDING
  LEFT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum SuggestionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  SYSTEM
  ALERT
  INVITE
  SUGGESTION
  CUSTOM
}

enum NotificationStatus {
  UNREAD
  READ
  DELETED
}
