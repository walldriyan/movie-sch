// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Post {
  id                    Int             @id @default(autoincrement())
  title                 String
  description           String
  posterUrl             String?
  year                  Int?
  duration              String?
  genres                String[]
  imdbRating            Float?
  rottenTomatoesRating  Int?
  googleRating          Int?
  status                String?
  viewCount             Int             @default(0)
  directors             String?
  mainCast              String?
  mediaLinks            String?
  type                  PostType        @default(MOVIE)

  author                User?           @relation(fields: [authorId], references: [id])
  authorId              String?
  
  reviews               Review[]
  subtitles             Subtitle[]
  favoritedBy           FavoritePost[]
  episodes              Episode[]
  metaData              MetaData[]

  likedBy               User[]          @relation("LikedPosts")
  dislikedBy            User[]          @relation("DislikedPosts")

  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
}

model Episode {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  episodeNumber Int
  seasonNumber  Int
  
  post        Post?   @relation(fields: [postId], references: [id])
  postId      Int?
}

model MetaData {
  id          Int     @id @default(autoincrement())
  key         String
  value       String
  
  post        Post?   @relation(fields: [postId], references: [id])
  postId      Int?
}

model Review {
  id          Int      @id @default(autoincrement())
  rating      Int
  comment     String
  
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  
  post        Post?    @relation(fields: [postId], references: [id])
  postId      Int?

  createdAt   DateTime @default(now())
}

model Subtitle {
  id              Int      @id @default(autoincrement())
  language        String
  uploaderName    String
  filePath        String?

  post            Post?    @relation(fields: [postId], references: [id])
  postId          Int?

  createdAt       DateTime @default(now())
}

model FavoritePost {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@id([userId, postId])
}

enum PostType {
  MOVIE
  TV_SERIES
  SONG
  NOVEL
  POEM
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  
  role                    String?
  bio                     String?
  website                 String?
  twitter                 String?
  linkedin                String?

  permissionRequestStatus String?
  permissionRequestMessage String?

  accounts                Account[]
  sessions                Session[]
  posts                   Post[]
  reviews                 Review[]
  favoritePosts           FavoritePost[]

  likedPosts              Post[]    @relation("LikedPosts")
  dislikedPosts           Post[]    @relation("DislikedPosts")

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
 
  @@unique([identifier, token])
}
