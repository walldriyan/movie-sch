// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    String    @default("USER")
  bio                     String?
  website                 String?
  twitter                 String?
  linkedin                String?
  permissionRequestStatus String?
  permissionRequestMessage String?

  accounts Account[]
  sessions Session[]
  movies   Movie[]
  reviews  Review[]

  favoriteMovies FavoriteMovie[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movie {
  id                   Int      @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  year                 Int
  duration             String
  genres               String
  imdbRating           Float
  rottenTomatoesRating Int?
  googleRating         Int?
  status               String   @default("DRAFT")
  viewCount            Int      @default(0)
  directors            String?
  mainCast             String?
  mediaLinks           String?

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  reviews   Review[]
  subtitles Subtitle[]
  likedBy   User[]     @relation("MovieLikes")
  dislikedBy User[]     @relation("MovieDislikes")

  favoritedBy FavoriteMovie[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FavoriteMovie {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   Int
  createdAt DateTime @default(now())

  @@id([userId, movieId])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   Int
  createdAt DateTime @default(now())
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  fileUrl      String
  uploaderName String
  movie        Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId      Int
  createdAt    DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
