// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  DISABLED
  PENDING
  DELETED
}

model User {
  id                String    @id @default(cuid())
  name              String
  username          String?   @unique
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  bio               String?
  coverImage        String?
  website           String?
  twitter           String?
  linkedin          String?
  password          String
  role              Role      @default(USER)
  status            UserStatus @default(ACTIVE)

  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  accounts                Account[]
  sessions                Session[]
  posts                   Post[]
  reviews                 Review[]
  favoritePosts           FavoritePost[]
  likedPosts              Post[]                  @relation("LikedPosts")
  dislikedPosts           Post[]                  @relation("DislikedPosts")
  createdSeries           Series[]
  groups                  GroupMember[]
  sentInvites             GroupInvite[]           @relation("SentInvites")
  receivedInvites         GroupInvite[]           @relation("ReceivedInvites")
  sentSuggestions         GroupSuggestion[]       @relation("SentSuggestions")
  receivedSuggestions     GroupSuggestion[]       @relation("ReceivedSuggestions")
  sentNotifications       Notification[]          @relation("SentNotifications")
  receivedNotifications   UserNotification[]
  blockedBy               UserBlock[]             @relation("Blocking")
  blocking                UserBlock[]             @relation("Blocked")
  createdGroups           Group[]
}

enum PostType {
  MOVIE
  TV_SERIES
  OTHER
}

enum PostStatus {
  PUBLISHED
  DRAFT
  PENDING_APPROVAL
  PRIVATE
  PENDING_DELETION
}

enum PostVisibility {
  PUBLIC
  PRIVATE
  GROUP_ONLY
}

model Post {
  id                   Int               @id @default(autoincrement())
  title                String
  description          String
  posterUrl            String?
  viewCount            Int               @default(0)
  status               String            @default("DRAFT")
  type                 PostType          @default(MOVIE)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  authorId             String
  year                 Int?
  duration             String?
  genres               String?
  directors            String?
  mainCast             String?
  imdbRating           Float?
  rottenTomatoesRating Int?
  googleRating         Int?
  seriesId             Int?
  orderInSeries        Int?
  visibility           PostVisibility    @default(PUBLIC)
  groupId              Int?

  author        User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reviews       Review[]
  favoritePosts FavoritePost[]
  likedBy       User[]           @relation("LikedPosts")
  dislikedBy    User[]           @relation("DislikedPosts")
  subtitles     Subtitle[]
  mediaLinks    MediaLink[]
  episodes      Episode[]
  metaData      MetaData[]
  series        Series?          @relation(fields: [seriesId], references: [id])
  group         Group?           @relation(fields: [groupId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    Int
  parentId  Int?

  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent Review?  @relation("ReviewReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies Review[] @relation("ReviewReplies")
}

model FavoritePost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String
  postId    Int

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Series {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String

  posts  Post[]
  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

enum SubtitleAccessLevel {
  PUBLIC
  SUBSCRIBER_ONLY
  AUTHORIZED_ONLY
}

model Subtitle {
  id           Int      @id @default(autoincrement())
  language     String
  url          String
  uploaderName String
  accessLevel  SubtitleAccessLevel @default(PUBLIC)
  createdAt    DateTime @default(now())
  postId       Int

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model MediaLink {
  id     Int    @id @default(autoincrement())
  type   String // "trailer" or "image"
  url    String
  postId Int

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Episode {
  id          Int     @id @default(autoincrement())
  title       String
  episodeNumber Int
  seasonNumber Int
  releaseDate DateTime?
  description String?
  posterUrl   String?
  postId      Int

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model MetaData {
  id     Int    @id @default(autoincrement())
  key    String
  value  String
  postId Int

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum GroupStatus {
  ACTIVE
  DISABLED
  PENDING
  DELETED
}

enum GroupVisibility {
  PUBLIC
  PRIVATE
}

model Group {
  id           Int             @id @default(autoincrement())
  name         String
  description  String?
  profilePhoto String?
  coverPhoto   String?
  status       GroupStatus     @default(ACTIVE)
  visibility   GroupVisibility @default(PUBLIC)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  createdById  String

  createdBy   User              @relation(fields: [createdById], references: [id])
  members     GroupMember[]
  invites     GroupInvite[]
  suggestions GroupSuggestion[]
  permissions GroupPermission[]
  posts       Post[]
}

enum GroupMemberRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum GroupMemberStatus {
  ACTIVE
  DISABLED
  PENDING
  LEFT
}

model GroupMember {
  id        Int               @id @default(autoincrement())
  role      GroupMemberRole   @default(MEMBER)
  status    GroupMemberStatus @default(ACTIVE)
  joinedAt  DateTime          @default(now())
  userId    String
  groupId   Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

enum GroupInviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

model GroupInvite {
  id         String            @id @default(cuid())
  status     GroupInviteStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  groupId    Int
  senderId   String
  receiverId String

  group    Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  sender   User  @relation("SentInvites", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User  @relation("ReceivedInvites", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([groupId, senderId, receiverId])
}

enum GroupSuggestionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model GroupSuggestion {
  id              String                @id @default(cuid())
  status          GroupSuggestionStatus @default(PENDING)
  createdAt       DateTime              @default(now())
  groupId         Int
  suggestedById   String
  suggestedUserId String

  group         Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  suggestedBy   User  @relation("SentSuggestions", fields: [suggestedById], references: [id], onDelete: Cascade)
  suggestedUser User  @relation("ReceivedSuggestions", fields: [suggestedUserId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  SYSTEM
  ALERT
  INVITE
  SUGGESTION
  CUSTOM
  VIEW
  REACTION
  COMMENT
}

model Notification {
  id           String           @id @default(cuid())
  title        String
  message      String
  type         NotificationType @default(CUSTOM)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  senderId     String?

  sender User?             @relation("SentNotifications", fields: [senderId], references: [id], onDelete: SetNull)
  users  UserNotification[]
}

model UserNotification {
  id             String   @id @default(cuid())
  isRead         Boolean  @default(false)
  isHidden       Boolean  @default(false)
  isArchived     Boolean  @default(false)
  userId         String
  notificationId String

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
}

model UserBlock {
  blockerId String
  blockedId String

  blocker User @relation("Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@id([blockerId, blockedId])
}

model GroupPermission {
  id          Int             @id @default(autoincrement())
  permissions Json
  groupId     Int
  role        GroupMemberRole

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, role])
}
